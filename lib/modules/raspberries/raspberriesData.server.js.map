{"version":3,"sources":["modules/raspberries/raspberriesData.server.js"],"names":[],"mappings":"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","file":"modules/raspberries/raspberriesData.server.js","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\nimport type { RaspberryData, RaspberryConfig } from './types';\n/* import { slugify as _slugify } from 'transliteration';\n\nfunction slugify(string) {\n    return _slugify(string, { lowercase: true, separator: '-' });\n} */\n\nconst dataPath = `${__dirname}/../../../data`;\nconst dataFilename = `${dataPath}/raspberries.json`;\n\nexport const items: Array<RaspberryData> = JSON.parse(readFileSync(dataFilename));\nconst map = new Map(items.map(item => [item.id, item]));\n\nif (map.size !== items.length) {\n    throw new Error('Duplicated id');\n}\n\nfunction save() {\n    writeFileSync(dataFilename, JSON.stringify(items, null, 4));\n}\n\nexport function getById(id: string) {\n    return map.get(id);\n}\n\nexport function changeConfig(id, config: RaspberryConfig) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    // TODO configManager\n    config = Object.assign({}, {\n        time: Date.now(),\n        display: config.display || 'kweb3',\n        url: config.url.trim(),\n    });\n    map.get(id).config = config;\n    save();\n\n    return config;\n}\n// ip should not be written\nexport function addNew(id: string, mac: string, name: string) {\n    const newRaspberryItem = {\n        id,\n        name,\n        macAddresses: [mac],\n        config: {},\n    };\n\n    if (map.has(newRaspberryItem.id)) {\n        throw new Error(`Already has id: ${newRaspberryItem.id}`);\n    }\n\n    items.push(newRaspberryItem);\n    map.set(newRaspberryItem.id, newRaspberryItem);\n    save();\n\n    return newRaspberryItem;\n}\n\nexport function replaceMacAddresses(id: string, newMacAddresses: Array<string>) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    map.get(id).macAddresses = newMacAddresses;\n    save();\n}\n\nexport function addMacAddress(id: string, newMacAddress: string) {\n    if (!map.has(id)) {\n        throw new Error('Invalid id');\n    }\n\n    map.get(id).macAddresses.push(newMacAddress);\n    save();\n}\n\nexport function saveScreenshot(id: string, screenshot: Buffer) {\n    writeFileSync(screenshotPath(id), screenshot);\n}\n\nexport function screenshotPath(id: string): string {\n    return `${dataPath}/screenshot-${id}.png`;\n}\n"],"sourceRoot":"/"}