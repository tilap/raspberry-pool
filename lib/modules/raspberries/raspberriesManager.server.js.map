{"version":3,"sources":["modules/raspberries/raspberriesManager.server.js"],"names":[],"mappings":"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","file":"modules/raspberries/raspberriesManager.server.js","sourcesContent":["import Logger from 'nightingale';\nimport * as data from './raspberriesData.server';\nimport { updateFromAction } from './raspberryActionManager';\nimport { emit as emitToRaspberryClient, broadcast as broadcastToRaspberryClients } from './websocket/raspberryClient.server';\nimport { broadcastAction as raspberriesBroadcastAction } from './websocket/raspberries.server';\nimport type { RaspberryConfig, RaspberryData, Raspberry } from './types';\nimport {\n    add as addAction,\n    update as updateAction,\n    remove as removeAction,\n    screenshotUpdated as screenshotUpdatedAction,\n} from './actions/raspberry';\n\nconst logger = new Logger('app.raspberriesManager');\nconst map = new Map();\nconst mapByMac = new Map();\n\ndata.items.forEach((item: ?RaspberryData) => {\n    const raspberry = {\n        id: item.id,\n        data: item,\n        registered: true,\n        online: false,\n        ip: null,\n    };\n\n    map.set(item.id, raspberry);\n    item.macAddresses.forEach(mac => {\n        if (mapByMac.has(mac)) {\n            throw new Error(`Mac defined more than one: ${mac}`);\n        }\n\n        mapByMac.set(mac, raspberry);\n    });\n});\n\nexport function getById(id: string): ?Raspberry {\n    return map.get(id);\n}\n\nexport function getByMac(mac: string): ?Raspberry {\n    return mapByMac.get(mac);\n}\n\nexport function getAll(): Array<Raspberry> {\n    return Array.from(map.values());\n}\n\nexport function screenshotPath(id: string): string {\n    return data.screenshotPath(id);\n}\n\n/* FROM raspberry clients */\n\nexport function setOnline(mac, configTime, info) {\n    let raspberry = getByMac(mac);\n    let unknownMac = false;\n    if (!raspberry) {\n        unknownMac = true;\n        logger.warn('unknown mac, adding', { mac });\n        raspberry = { id: mac };\n        map.set(raspberry.id, raspberry);\n        mapByMac.set(mac, raspberry);\n    } else {\n        logger.info('raspberry online', { mac });\n        if (raspberry.updating) {\n            raspberry.updating = false;\n        }\n    }\n\n    raspberry.online = mac;\n    Object.assign(raspberry, info);\n\n    raspberriesBroadcastAction(unknownMac ? addAction(raspberry) : updateAction(raspberry));\n\n    if (raspberry.data && raspberry.data.config.time !== configTime) {\n        emitToRaspberryClient(raspberry.online, 'changeConfig', raspberry.data.config);\n    }\n}\n\nexport function update(mac: string, info) {\n    let raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (info.screenState && raspberry.nextExpectedScreenState === info.screenState) {\n        raspberry.nextExpectedScreenState = null;\n    }\n\n    Object.assign(raspberry, info);\n    raspberriesBroadcastAction(updateAction(raspberry));\n}\n\nexport function setOffline(mac: string) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        // should not happen...\n        return;\n    }\n\n    if (!raspberry.data) {\n        map.delete(mac);\n        mapByMac.delete(mac);\n        raspberriesBroadcastAction(removeAction(raspberry));\n    } else {\n        Object.assign(raspberry, {\n            online: false,\n            // keep last known ip\n        });\n\n        raspberriesBroadcastAction(updateAction(raspberry));\n    }\n}\n\nexport function changeScreenshot(mac: string, screenshot: Buffer) {\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        logger.warn('changeScreenshot, no raspberry', { mac });\n        // should not happen...\n        return;\n    }\n\n    data.saveScreenshot(raspberry.id, screenshot);\n    raspberriesBroadcastAction(screenshotUpdatedAction(raspberry.id, Date.now()));\n}\n\n/* FROM browser clients */\n\nconst TIME_OUTDATED = 30000;\nlet intervalUpdateData;\nlet lastUpdated = Date.now() - TIME_OUTDATED;\n\nexport function raspberriesClientsConnected() {\n    const now = Date.now();\n    if (lastUpdated > now - TIME_OUTDATED) {\n        logger.debug('not outdated');\n        return;\n    }\n    lastUpdated = now;\n\n    logger.info('update data');\n    broadcastToRaspberryClients('screenshot');\n\n    intervalUpdateData = setInterval(() => {\n        logger.info('update data');\n        broadcastToRaspberryClients('screenshot');\n    }, TIME_OUTDATED);\n}\n\nexport function raspberriesClientsDisonnected() {\n    if (intervalUpdateData) {\n        clearInterval(intervalUpdateData);\n    }\n}\n\nexport function changeConfig(id: string, config: RaspberryConfig) {\n    logger.log('changeConfig', { id, config });\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return;\n    }\n\n    const newConfig = data.changeConfig(id, config);\n    emitToRaspberryClient(raspberry.online, 'changeConfig', newConfig);\n    return newConfig;\n}\n\nexport function add(mac: string, { name, addOrReplace, id }) {\n    logger.log('add', { mac, name, addOrReplace, id });\n    const raspberry = getByMac(mac);\n    if (!raspberry) {\n        return logger.warn('unknown raspberry', { mac });\n    } else if (raspberry.registered) {\n        return logger.warn('raspberry already registered', { mac });\n    }\n\n    if (addOrReplace) {\n        mapByMac.delete(mac);\n        map.delete(mac);\n        const existing = map.get(id);\n        if (!existing) {\n            return logger.warn('existing not found', { id });\n        }\n\n        if (addOrReplace === 'replace') {\n            existing.data.macAddresses.forEach(mac => mapByMac.delete(mac));\n            data.replaceMacAddresses(id, [mac]);\n        } else {\n            data.addMacAddress(id, mac);\n        }\n        mapByMac.set(mac, existing);\n        existing.online = raspberry.online;\n        existing.ip = raspberry.ip;\n        existing.screenState = raspberry.screenState;\n\n        return existing;\n    } else {\n        raspberry.registered = true;\n        raspberry.data = data.addNew(raspberry.id, mac, name);\n    }\n\n    return raspberry;\n}\n\nexport function sendAction(id: string, action: string) {\n    const raspberry = getById(id);\n    if (!raspberry || !raspberry.registered) {\n        logger.warn('unknown raspberry', { id });\n        // should not happen...\n        return Promise.resolve();\n    }\n\n    Object.assign(raspberry, updateFromAction(action));\n    emitToRaspberryClient(raspberry.online, 'action', action);\n    return raspberry;\n}\n"],"sourceRoot":"/"}