{"version":3,"sources":["modules/raspberries/websocket/raspberryClient.server.js"],"names":[],"mappings":"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","file":"modules/raspberries/websocket/raspberryClient.server.js","sourcesContent":["import Logger from 'nightingale';\nimport * as raspberriesManager from '../raspberriesManager.server';\nimport { lt as semverLt } from 'semver';\n\nconst logger = new Logger('app.websocket.raspberryClient');\nconst MIN_SUPPORTED_VERSION = '4.1.0';\nconst clients = new Map();\n\n\nexport function emit(mac, eventName: string, ...data?: Array<any>) {\n    logger.debug('emit', { mac, data });\n    if (!clients.has(mac)) {\n        logger.warn('cannot send message');\n        return;\n    }\n    clients.get(mac).emit(eventName, ...data);\n}\n\nexport function broadcast(eventName: string, ...data?: Array<any>) {\n    clients.forEach(socket => socket.emit(eventName, ...data));\n}\n\n\nexport default function init(io) {\n    io.of('raspberry-client', socket => onConnection(socket));\n}\n\nfunction onConnection(socket) {\n    logger.info('client connected');\n    let clientMac;\n\n    socket.on('disconnect', () => {\n        logger.info('client disconnected');\n        if (clientMac && clients.get(clientMac) === socket) {\n            clients.delete(clientMac);\n\n            raspberriesManager.setOffline(clientMac);\n        }\n        clientMac = null;\n    });\n\n    socket.on('hello', ({ mac, version, configTime, ip, screenState }) => {\n        logger.info('received hello', { mac, version, configTime, ip, screenState });\n\n        if (clientMac) {\n            logger.warn('already have clientMac');\n            return;\n        }\n\n        if (!version || semverLt(version, MIN_SUPPORTED_VERSION)) {\n            socket.emit('selfUpdate');\n            return;\n        }\n\n\n        clientMac = mac;\n        clients.set(mac, socket);\n\n        raspberriesManager.setOnline(mac, configTime, { ip, screenState });\n    });\n\n    socket.on('screenshot', ({ buffer }, callback) => {\n        logger.info('got screenshot');\n        raspberriesManager.changeScreenshot(clientMac, buffer); // non async method\n        callback();\n    });\n\n    socket.on('update', data => {\n        logger.info('received update', data);\n\n        const patch = {};\n        ['screenState', 'updating'].forEach(key => {\n            if (data.hasOwnProperty(key)) {\n                patch[key] = data[key];\n            }\n        });\n\n        raspberriesManager.update(clientMac, patch);\n    });\n}\n"],"sourceRoot":"/"}