{"version":3,"sources":["modules/raspberries/IndexView.jsx"],"names":[],"mappings":";;;;;;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAY,kB;;AACZ;;;;;;AAEA,MAAM,SAAN,0BAAkC;;AAa9B,gBAAY,KAAZ,EAAmB;AACf,cAAM,KAAN;AACA,aAAK,YAAL,GAAoB;AAAA,mBAAa,MAAM,QAAN,CAAe,mBAAmB,YAAnB,CAAgC,YAAhC,CAAf,CAAb;AAAA,SAApB;AACA,aAAK,UAAL,GAAkB;AAAA,mBAAa,MAAM,QAAN,CAAe,mBAAmB,UAAnB,CAA8B,YAA9B,CAAf,CAAb;AAAA,SAAlB;AACA,aAAK,eAAL,GAAuB;AAAA,mBAAa,MAAM,QAAN,CAAe,mBAAmB,eAAnB,CAAmC,YAAnC,CAAf,CAAb;AAAA,SAAvB;AACH;;AAED,wBAAoB;AAAA,cACR,QADQ,GACK,KAAK,KADV,CACR,QADQ;;AAEhB,YAAI,6BAAJ,EAAmB;AACf,iCAAK,uBAAL,EAA8B,QAAqB;AAAA,oBAAlB,WAAkB,QAAlB,WAAkB;;AAC/C,yBAAS,mBAAmB,SAAnB,CAA6B,WAA7B,CAAT;AACH,aAFD;AAGH;AACD,aAAK,iBAAL,GAAyB,mBAAG,SAAH,EAAc,MAAM;AACzC,iCAAK,uBAAL,EAA8B,SAAqB;AAAA,oBAAlB,WAAkB,SAAlB,WAAkB;;AAC/C,yBAAS,mBAAmB,SAAnB,CAA6B,WAA7B,CAAT;AACH,aAFD;AAGH,SAJwB,CAAzB;AAKH;;AAED,2BAAuB;AACnB,6BAAK,yBAAL;AACA,4BAAI,SAAJ,EAAe,KAAK,iBAApB;AACH;;AAED,aAAS;AAAA,qBACiD,KAAK,KADtD;AAAA,cACG,kBADH,UACG,kBADH;AAAA,cACuB,qBADvB,UACuB,qBADvB;;AAEL,cAAM,QAAQ,KAAK,OAAL,CAAa,OAAb,CAAqB,CAArB,CAAuB,sBAAvB,CAAd;AACA,aAAK,OAAL,CAAa,QAAb,CAAsB,KAAtB;AACA,eAAQ;AAAA;YAAA;YACJ;AACI,6BAAa,qBADjB;AAEI,4BAAY,KAAK;AAFrB,cADI;YAKJ;AACI,6BAAa,kBADjB;AAEI,oCAAoB,sBAAsB,MAAtB,CAA6B;AAAA,2BAAK,CAAC,EAAE,MAAR;AAAA,iBAA7B,CAFxB;AAGI,iCAAiB,KAAK,eAH1B;AAII,4BAAY,KAAK;AAJrB,cALI;YAWJ;AACI,6BAAa,qBADjB;AAEI,8BAAc,KAAK,YAFvB;AAGI,4BAAY,KAAK;AAHrB;AAXI,SAAR;AAiBH;AA5D6B;;AAA5B,S,CACK,S,GAAY;AACf,2BAAuB,iBAAU,KAAV,CAAgB,UADxB;AAEf,wBAAoB,iBAAU,KAAV,CAAgB,UAFrB;AAGf,cAAU,iBAAU,IAAV,CAAe;AAHV,C;AADjB,S,CAOK,Y,GAAe;AAClB,cAAU,iBAAU,IAAV,CAAe,UADP;AAElB,aAAS,iBAAU,MAAV,CAAiB;AAFR,C;kBAwDX,yBAAQ;AAAA,QAAG,WAAH,SAAG,WAAH;AAAA,WAAsB;AACzC,+BAAuB,YAAY,MAAZ,CAAmB;AAAA,mBAAK,EAAE,UAAP;AAAA,SAAnB,CADkB;AAEzC,4BAAoB,YAAY,MAAZ,CAAmB;AAAA,mBAAK,CAAC,EAAE,UAAR;AAAA,SAAnB;AAFqB,KAAtB;AAAA,CAAR,EAGX,SAHW,C","file":"modules/raspberries/IndexView.js","sourcesContent":["import { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport Header from './components/HeaderComponent';\nimport RaspberryList from './components/RaspberryListComponent';\nimport UnknownRaspberryList from './components/UnknownRaspberryListComponent';\nimport * as raspberriesActions from './actions/raspberry';\nimport { isConnected, emit, on, off } from '../../websocket';\n\nclass IndexView extends Component {\n    static propTypes = {\n        registeredRaspberries: PropTypes.array.isRequired,\n        unknownRaspberries: PropTypes.array.isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        setTitle: PropTypes.func.isRequired,\n        context: PropTypes.object.isRequired,\n    };\n\n\n    constructor(props) {\n        super(props);\n        this.changeConfig = (...args) => props.dispatch(raspberriesActions.changeConfig(...args));\n        this.sendAction = (...args) => props.dispatch(raspberriesActions.sendAction(...args));\n        this.registerUnknown = (...args) => props.dispatch(raspberriesActions.registerUnknown(...args));\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        if (isConnected()) {\n            emit('subscribe:raspberries', ({ raspberries }) => {\n                dispatch(raspberriesActions.updateAll(raspberries));\n            });\n        }\n        this._handlerConnected = on('connect', () => {\n            emit('subscribe:raspberries', ({ raspberries }) => {\n                dispatch(raspberriesActions.updateAll(raspberries));\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        emit('unsubscribe:raspberries');\n        off('connect', this._handlerConnected);\n    }\n\n    render() {\n        const { unknownRaspberries, registeredRaspberries } = this.props;\n        const title = this.context.context.t('raspberry-pool.title');\n        this.context.setTitle(title);\n        return (<div>\n            <Header\n                raspberries={registeredRaspberries}\n                sendAction={this.sendAction}\n            />\n            <UnknownRaspberryList\n                raspberries={unknownRaspberries}\n                offlineRaspberries={registeredRaspberries.filter(r => !r.online)}\n                registerUnknown={this.registerUnknown}\n                sendAction={this.sendAction}\n            />\n            <RaspberryList\n                raspberries={registeredRaspberries}\n                changeConfig={this.changeConfig}\n                sendAction={this.sendAction}\n            />\n        </div>);\n    }\n}\n\nexport default connect(({ raspberries }) => ({\n    registeredRaspberries: raspberries.filter(r => r.registered),\n    unknownRaspberries: raspberries.filter(r => !r.registered),\n}))(IndexView);\n"],"sourceRoot":"/"}