{"version":3,"sources":["modules/raspberries/actions/raspberry.js"],"names":[],"mappings":"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","file":"modules/raspberries/actions/raspberry.js","sourcesContent":["import { createAction } from 'alp-react-redux';\n\nexport const updateAll = createAction('UPDATE_ALL_RASPBERRIES', 'raspberries');\nexport const add = createAction('ADD_RASPBERRY', 'raspberry');\nexport const update = createAction('UPDATE_RASPBERRY', raspberry => ({ id: raspberry.id, raspberry }));\nexport const updateConfig = createAction(\n    'UPDATE_RASPBERRY_CONFIG',\n    (raspberry, config) => ({ id: raspberry.id, config }),\n);\nexport const remove = createAction('REMOVE_RASPBERRY', 'id');\nexport const screenshotUpdated = createAction('SCREENSHOT_UPDATED', 'id,screenshotDate');\nexport const saving = createAction('SAVING_RASPBERRY', raspberry => ({ id: raspberry.id }));\nexport const saved = createAction('SAVED_RASPBERRY', (raspberry, changes) => ({ id: raspberry.id, changes }));\nexport const sendingAction = createAction(\n    'SENDING_ACTION_RASPBERRY',\n    (raspberry, action) => ({ id: raspberry.id, action })\n);\nexport const actionSent = createAction(\n    'ACTION_SENT_RASPBERRY',\n    (raspberry, action, result) => ({ id: raspberry.id, action, result })\n);\n\nexport function changeConfig(raspberry, newConfig) {\n    return async (dispatch, { websocket }) => {\n        dispatch(saving(raspberry));\n        const configSaved = await websocket.emit('raspberry:changeConfig', raspberry.id, newConfig);\n        dispatch(updateConfig(raspberry, configSaved));\n        dispatch(saved(raspberry, { data: { ...raspberry.data, config: configSaved } }));\n    };\n}\n\nexport function sendAction(raspberries, action) {\n    return async (dispatch, { websocket }) => {\n        raspberries.forEach(raspberry => dispatch(sendingAction(raspberry, action)));\n        const result = await websocket.emit('raspberry:sendAction', raspberries.map(r => r.id), action);\n        raspberries.forEach(raspberry => dispatch(actionSent(raspberry, action, result)));\n    };\n}\n\nexport function registerUnknown(raspberry, { name, addOrReplace, id }) {\n    return async (dispatch, { websocket }) => {\n        dispatch(saving(raspberry));\n        const newRaspberry = await websocket.emit('raspberry:registerUnknown', raspberry.id, { name, addOrReplace, id });\n        if (newRaspberry) {\n            if (newRaspberry.id !== raspberry.id) {\n                dispatch(remove(raspberry.id));\n                dispatch(update(newRaspberry));\n            } else {\n                dispatch(saved(newRaspberry, newRaspberry));\n            }\n        }\n    };\n}\n"],"sourceRoot":"/"}